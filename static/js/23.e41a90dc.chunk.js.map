{"version":3,"file":"static/js/23.e41a90dc.chunk.js","mappings":"wMAwDA,UA9CoB,SAAHA,GAAmB,IAAdC,EAAOD,EAAPC,QACZC,GAAWC,EAAAA,EAAAA,MAEjBC,GAAkCC,EAAAA,EAAAA,UAAS,CACvCC,SAAU,CAAEC,MAAO,KAAMC,eAAgB,SACzCC,gBAAiB,CAAEF,MAAO,KAAMC,eAAgB,WAElDE,GAAAC,EAAAA,EAAAA,GAAAP,EAAA,GAJKQ,EAASF,EAAA,GAAEG,EAAYH,EAAA,IAM9BI,EAAAA,EAAAA,YAAU,WACN,IAAK,IAAMC,KAAgBH,EACnBI,SAASC,eAAeF,KACxBG,EAAAA,EAAAA,IAAgBH,EAAcH,EAG1C,GAAG,CAACA,IAiBJ,OACIO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,cAAaD,UACxBE,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,MAAO,wBAAyBC,SAAS,iCAA8BC,MAAI,EAAAN,SAAA,EAClFE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,mBAAkBD,SAAA,EAC7BF,EAAAA,EAAAA,KAACS,EAAAA,GAAa,CAACH,MAAO,gBAAcI,YAAa,gBAAcC,GAAG,WAAWC,SAAU,SAACC,IAAQC,EAAAA,EAAAA,IAAYD,EAAG,WAAYpB,EAAWC,EAAc,KACpJM,EAAAA,EAAAA,KAACS,EAAAA,GAAa,CAACH,MAAO,0BAAwBI,YAAa,0BAAwBC,GAAG,kBAAkBC,SAAU,SAACC,IAAQC,EAAAA,EAAAA,IAAYD,EAAG,kBAAmBpB,EAAWC,EAAc,QAE1LM,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACZ,UAAW,cAAeG,MAAM,oBAAiBU,QAAS,YAtB1EC,EAAAA,EAAAA,IAAiBxB,EAAWC,GAI5BD,EAAUN,SAASC,OAASK,EAAUH,gBAAgBF,OAASK,EAAUN,SAASC,OAClFN,GAAQ,GACRC,EAAS,MAITmC,MAAM,qCAYiG,UAKnH,C","sources":["pages/NewPassword/NewPassword.jsx"],"sourcesContent":["import React from \"react\";\r\nimport './NewPassword.scss'\r\nimport LoginCard from \"../../components/atoms/LoginCard/LoginCard\";\r\nimport { Button, Input, InputPassword } from \"../../components\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { ColorValidation, SubmitValidation, UpdateValue } from \"../../utilities/Validations\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst NewPassword = ({setAuth}) => {\r\n    const navigate = useNavigate()\r\n\r\n    const [inputList, setInputList] = useState({\r\n        password: { value: null, validationType: \"email\" },\r\n        confirmPassword: { value: null, validationType: \"email\" },\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        for (const propertyName in inputList) {\r\n            if (document.getElementById(propertyName)) {\r\n                ColorValidation(propertyName, inputList)\r\n            }\r\n        }\r\n    }, [inputList])\r\n\r\n    const validationFunction = () => {\r\n        if (SubmitValidation(inputList, setInputList)) {\r\n\r\n        }\r\n\r\n        if (inputList.password.value == inputList.confirmPassword.value && inputList.password.value) {\r\n            setAuth(true)\r\n            navigate(\"/\")\r\n\r\n        }\r\n        else {\r\n            alert(\"ingrese las contraseñas iguales\")\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"NewPassword\">\r\n                <LoginCard title={\"Actualiza tus accesos\"} subTitle=\"Ingresa la nueva contraseña\" logo>\r\n                    <div className=\"inputs-container\">\r\n                        <InputPassword title={\"Contraseña\"} placeholder={\"Contraseña\"} id=\"password\" onChange={(e) => { UpdateValue(e, \"password\", inputList, setInputList) }}></InputPassword>\r\n                        <InputPassword title={\"Confirmar contraseña\"} placeholder={\"Confirmar contraseña\"} id=\"confirmPassword\" onChange={(e) => { UpdateValue(e, \"confirmPassword\", inputList, setInputList) }}></InputPassword>\r\n                    </div>\r\n                    <Button className={\"btn_primary\"} title=\"Iniciar sesión\" onCLick={() => { validationFunction() }}></Button>\r\n                </LoginCard>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default NewPassword"],"names":["_ref","setAuth","navigate","useNavigate","_useState","useState","password","value","validationType","confirmPassword","_useState2","_slicedToArray","inputList","setInputList","useEffect","propertyName","document","getElementById","ColorValidation","_jsx","_Fragment","children","className","_jsxs","LoginCard","title","subTitle","logo","InputPassword","placeholder","id","onChange","e","UpdateValue","Button","onCLick","SubmitValidation","alert"],"sourceRoot":""}