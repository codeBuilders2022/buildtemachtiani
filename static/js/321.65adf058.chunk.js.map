{"version":3,"file":"static/js/321.65adf058.chunk.js","mappings":"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","sources":["components/atoms/AnimationLoading/AnimationLoading.jsx","Api/login/apiLogic.js","pages/Login/Login.jsx","utilities/Hooks.js"],"sourcesContent":["import React from 'react'\r\n\r\nimport \"./AnimationLoading.scss\"\r\n\r\nconst AnimationLoading = ({className}) => {\r\n  return (\r\n    <div className={`cnt_loading ${className}`}>\r\n        <div className='AnimationLoading border-solid border-t-[2px] border-green-700 dark:border-white'></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AnimationLoading","import axios from \"axios\"\r\nimport { CorrectModal, IncorrectModal, InfoModal } from \"../../components/molecules/modals/Modals\";\r\n// import { Decrypt } from \"../../utilities/Hooks\";\r\nimport cryptojs from 'crypto-js'\r\nconst key = process.env.REACT_APP_SECRET_KEY\r\nimport { Decrypt, Encrypt } from \"../../utilities/Hooks\";\r\nconst urlApi = process.env.REACT_APP_API_URL;\r\n\r\nexport const loginConfir = async (data, setName, navigate) => {\r\n    if (data) {\r\n      try {\r\n        const res = await axios.post(urlApi + \"/api/auth/local\", data);\r\n        const typeAcc = Decrypt(res.data.user.accounttype);\r\n        const IdCrip = Encrypt(res.data.user.id);\r\n        if (res.data.user.confirmed === true && process.env.REACT_APP_ACCOUNTTYPE === typeAcc) {\r\n          setName(res.data);\r\n          localStorage.setItem(\"token\", res.data.jwt);\r\n          localStorage.setItem(\"userWeb\", res.data.user.username);\r\n          localStorage.setItem(\"jeyaiodl\", IdCrip);\r\n          let idEncrypt = EncryptNB(res.data.user.id);\r\n          localStorage.setItem(\"ref\", idEncrypt);\r\n          return { status: 200, dtasEncrypt: idEncrypt, id: res.data.user.id };\r\n        } \r\n      } catch (error) { return error }\r\n    }\r\n  };\r\n  \r\n\r\nexport const EncryptNB = (text)=>\r\n{\r\n    let encrypt = cryptojs.AES.encrypt(text.toString(), key).toString();\r\n    encrypt = encrypt.replace(/\\//g, \"_\")\r\n    return encrypt\r\n}\r\n\r\nexport const DecryptNB = (encriptText) => {\r\n    let decrypt = encriptText.replace(/_/g, \"/\")\r\n    const iv = \"a0d5ebe6a0d5ebe6a0d5ebe6a0d5ebe6\";\r\n    return cryptojs.AES.decrypt(decrypt, key, { iv: cryptojs.enc.Hex.parse(iv)}).toString(cryptojs.enc.Utf8);\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport './Login.scss'\r\nimport LoginCard from \"../../components/atoms/LoginCard/LoginCard\";\r\nimport { Button, Input, InputPassword } from \"../../components\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { ColorValidation, SubmitValidation, UpdateValue } from \"../../utilities/Validations\";\r\nimport { useStateContext } from \"../../contexts/ContextProvider\";\r\nimport Back from \"../../components/atoms/Back/Back\";\r\nimport { loginConfir } from \"../../Api/login/apiLogic\";\r\nimport { Encrypt } from \"../../utilities/Hooks\";\r\nimport AnimationLoading from \"../../components/atoms/AnimationLoading/AnimationLoading\";\r\nimport { CorrectModal, IncorrectModal, InfoModal } from \"../../components/molecules/modals/Modals\";\r\nimport { getAxiosData } from \"../../Api/Committee/Committee\";\r\n\r\n\r\nconst Login = () => {\r\nconst navigate = useNavigate()\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [inputList,setInputList] = useState({\r\n        \"identifier\":{value:null, validationType:\"empty\"},\r\n        \"password\":{value:null, validationType:\"empty\"},\r\n    })\r\n\r\n    useEffect(()=>\r\n    {\r\n        for(const propertyName in inputList)\r\n        {\r\n            if(document.getElementById(propertyName))\r\n            {\r\n                ColorValidation(propertyName,inputList)\r\n            }\r\n        }\r\n    },[inputList])\r\n\r\n    const validationFunction = async () => {\r\n        if (!SubmitValidation(inputList, setInputList)) {\r\n          return;\r\n        }\r\n      \r\n        setLoading(true);\r\n        const data = {\r\n          identifier: inputList.identifier.value,\r\n          password: inputList.password.value\r\n        };\r\n      \r\n        try {\r\n          const resp = await loginConfir(data, navigate);\r\n          if (resp.status === 200) {\r\n            const id = resp.id\r\n            const myDtas = await getAxiosData(`/api/users/${id}?populate=register`)\r\n            const register = myDtas.register;\r\n            const arrayDtas = {\r\n              name: register.names + \" \" + register.lastName,\r\n              email: register.email,\r\n              letter: register.names.charAt(0)\r\n            }\r\n            CorrectModal(\"Credenciales correctas\");\r\n            localStorage.setItem(\"userDatasW\", JSON.stringify(arrayDtas))\r\n            setTimeout(() => {\r\n              window.location.replace(`/user/dashboard/${resp.dtasEncrypt}`);\r\n            }, 3500);\r\n          } else if (resp.response.data.error.name === \"ApplicationError\") {\r\n            \r\n            InfoModal(\r\n              \"Para iniciar sesión, necesitamos que confirmes tu cuenta.\",\r\n              \" Por favor, sigue las instrucciones en tu correo electrónico para completar el proceso de autenticación. Si necesitas ayuda, contáctanos. ¡Gracias!\"\r\n            );\r\n            setLoading(false)\r\n          } else if (resp.response.data.error.name === \"ValidationError\") {\r\n            IncorrectModal(\"Credenciales incorrectas\");\r\n            setLoading(false)\r\n          }\r\n        } catch (error) {\r\n            console.log(error)\r\n          // Manejar cualquier error de la llamada a loginConfir\r\n        }\r\n      };\r\n      \r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <Back className={\"back\"} url={\"/\"}></Back>\r\n                <LoginCard title={\"Inicio de sesión\"} subTitle=\"Ingresar aquí\">\r\n                    <div className=\"inputs-container\">\r\n                        <Input title=\"Usuario\" placeholder={\"Usuario\"} id=\"identifier\" onChange={(e)=>{UpdateValue(e,\"identifier\",inputList,setInputList)}}></Input>\r\n                        <InputPassword title={\"Contraseña\"} placeholder={\"Contraseña\"} id=\"password\" onChange={(e)=>{UpdateValue(e,\"password\",inputList,setInputList)}}></InputPassword>\r\n                    </div>\r\n                    <NavLink to={\"/recover-account\"}>\r\n                        <div className=\"rememberPassword\">Olvidé mi contraseña</div>\r\n                    </NavLink>\r\n                    {loading ? (\r\n                        <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\"}}>\r\n                            <AnimationLoading />\r\n                        </div>\r\n                    ):(     \r\n                        <Button className={\"btn_primary\"} title=\"Iniciar sesión\" onClick={()=>{validationFunction()}}></Button>\r\n                    )}\r\n                    <NavLink to={\"/log\"}>\r\n                        <div className=\"register\">Aun no tengo una cuenta</div>\r\n                    </NavLink>\r\n                </LoginCard>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Login","import cryptojs from 'crypto-js'\r\n\r\nconst key = process.env.REACT_APP_SECRET_KEY\r\n\r\nexport const Encrypt = (text) => {\r\n    let encrypt = cryptojs.AES.encrypt(text.toString(), key).toString();\r\n    encrypt = encrypt.replace(/\\//g, \"_\")\r\n    return encrypt\r\n};\r\n\r\n\r\nexport const Decrypt = (encriptText) => {\r\n    let decrypt = encriptText.replace(/_/g, \"/\")\r\n    const iv = \"a0d5ebe6a0d5ebe6a0d5ebe6a0d5ebe6\";\r\n    return cryptojs.AES.decrypt(decrypt, key, { iv: cryptojs.enc.Hex.parse(iv)}).toString(cryptojs.enc.Utf8);\r\n};"],"names":["_ref","className","_jsx","concat","children","key","process","loginConfir","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","setName","navigate","res","typeAcc","IdCrip","idEncrypt","wrap","_context","prev","next","axios","urlApi","sent","Decrypt","user","accounttype","Encrypt","id","confirmed","localStorage","setItem","jwt","username","EncryptNB","abrupt","status","dtasEncrypt","t0","stop","_x","_x2","_x3","apply","arguments","text","encrypt","cryptojs","toString","replace","useNavigate","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","value","validationType","_useState4","inputList","setInputList","useEffect","propertyName","document","getElementById","ColorValidation","validationFunction","resp","myDtas","register","arrayDtas","SubmitValidation","identifier","password","getAxiosData","name","names","lastName","email","letter","charAt","CorrectModal","JSON","stringify","setTimeout","window","location","response","error","InfoModal","IncorrectModal","console","log","_Fragment","_jsxs","Back","url","LoginCard","title","subTitle","Input","placeholder","onChange","e","UpdateValue","InputPassword","NavLink","to","style","width","display","justifyContent","AnimationLoading","Button","onClick","encriptText","decrypt","iv"],"sourceRoot":""}