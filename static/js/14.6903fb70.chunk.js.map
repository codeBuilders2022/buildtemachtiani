{"version":3,"file":"static/js/14.6903fb70.chunk.js","mappings":"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","sources":["Api/login/recover_account.js","pages/VerificationCode/VerificationCode.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  CorrectModal,\r\n  IncorrectModal,\r\n} from \"../../components/molecules/modals/Modals\";\r\nconst urlApi = process.env.REACT_APP_API_URL;\r\nconst key = process.env.REACT_APP_SECRET_KEY;\r\n\r\nimport cryptojs from \"crypto-js\";\r\nexport const VerifyEmail = async (findEmail, navigate) => {\r\n  await axios\r\n    .get(`${urlApi}/api/registers?filters[email][$eq]=${findEmail}`)\r\n    .then((res) => {\r\n      if (res.data.data.length != 0) {\r\n        CorrectModal(\"Email valido\");\r\n        //-------------------------------------------------------------------------verificar si el codigo ya se mando a ese correo\r\n        const mainFunction = async () => {\r\n          if (await findEmailF(findEmail)) {\r\n            //esto se ejecuta en caso de que el codigo ya exista en base de datos solo actualiza el codigo sin agregar un nuevo elemento a la db\r\n\r\n            updateCode(res.data.data, findEmail, navigate, res.data.data[0].id);\r\n          } else {\r\n            //en caso de que el codigo no exista con esa base de datos se genera uno nuevo desde 0\r\n\r\n            let code = generateCode();\r\n            createCodeApi(findEmail, code, navigate, res.data.data[0].id);\r\n            // navigate(`/verification-code/${findEmail}`);\r\n          }\r\n        };\r\n        mainFunction();\r\n      } else {\r\n        IncorrectModal(\"Email invalido\");\r\n      }\r\n    })\r\n    .catch(() => {\r\n      IncorrectModal(\"Email invalido\");\r\n    });\r\n};\r\n\r\n//--------------------------------------------------------------------------------------------------------FUNCIONES PARA VERIFICAR SI SE ACTUALIZA O SE CREA UN CODIGO\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst generateCode = () => {\r\n  const randomNum = Math.floor(Math.random() * 90000) + 10000;\r\n  return randomNum;\r\n};\r\n//////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst createCodeApi = async (email, code, navigate, id) => {\r\n  let idUsers = await getIdUsers(email);\r\n  console.log(\"idUsers\", idUsers);\r\n\r\n  const data = {\r\n    data: {\r\n      email: email,\r\n      code: code,\r\n    },\r\n  };\r\n  await axios.post(`${urlApi}/api/verify-codes`, data);\r\n  sendEmail(email, \"Este es un código de verificación de temachtiani\", code);\r\n  let codeEncrypt = Encrypt(code);\r\n  let idEncrypt = Encrypt(id);\r\n  let idUsersEncript = Encrypt(idUsers);\r\n  codeEncrypt = codeEncrypt.replace(/\\//g, \"_\");\r\n  idEncrypt = idEncrypt.replace(/\\//g, \"_\");\r\n  idUsersEncript = idUsersEncript.replace(/\\//g, \"_\");\r\n  navigate(`/verification-code/${codeEncrypt}/${idEncrypt}/${idUsersEncript}`);\r\n};\r\n//////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst findEmailF = async (email) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${urlApi}/api/verify-codes?filters[email][$eq]=${email}`\r\n    );\r\n\r\n    if (response.data.data.length != 0) {\r\n      console.log(\"true\", response.data.data);\r\n      return true;\r\n    } else {\r\n      console.log(\"false\", response.data.data);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"error en find email\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst sendEmail = async (email, subject, text) => {\r\n  if (typeof text !== \"undefined\") {\r\n    const codestring = text.toString();\r\n    const data = {\r\n      to: email,\r\n      subject: subject,\r\n      text: codestring,\r\n    };\r\n    console.log(\"codestring\", codestring);\r\n    await axios\r\n      .post(`${urlApi}/api/email`, data)\r\n      .then((res) => {\r\n        console.log(\"entro\");\r\n      })\r\n      .catch((res) => {\r\n        console.log(\"fallo\");\r\n      });\r\n  } else {\r\n  }\r\n};\r\n//////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst updateCode = async (data, email, navigate, id) => {\r\n  const response = await axios.get(\r\n    `${urlApi}/api/verify-codes?filters[email][$eq]=${email}`\r\n  );\r\n  let idUsers = await getIdUsers(email);\r\n  console.log(\"idUsers\",idUsers);\r\n  let newCode = generateCode();\r\n  const newData = {\r\n    data: {\r\n      code: newCode,\r\n    },\r\n  };\r\n  await axios.put(\r\n    `${urlApi}/api/verify-codes/${response.data.data[0].id}`,\r\n    newData\r\n  );\r\n  sendEmail(email, \"Este es un código de verificación de temachtiani\", newCode);\r\n  console.log(\"newCode\", newCode.toString());\r\n  console.log(\"key\", key);\r\n  //encriptacion de codigo\r\n  let codeEncrypt = Encrypt(newCode);\r\n  codeEncrypt = codeEncrypt.replace(/\\//g, \"_\");\r\n  //encriptacion del id\r\n  let idEncrypt = Encrypt(id);\r\n  idEncrypt = idEncrypt.replace(/\\//g, \"_\");\r\n  //encript de id users\r\n  let idUsersEncript = Encrypt(idUsers);\r\n  idUsersEncript = idUsersEncript.replace(/\\//g, \"_\");\r\n  \r\n  navigate(`/verification-code/${codeEncrypt}/${idEncrypt}/${idUsersEncript}`);\r\n};\r\n\r\nexport const Encrypt = (text) => {\r\n  return cryptojs.AES.encrypt(text.toString(), key).toString();\r\n};\r\nexport const Decrypt = (encriptText) => {\r\n  const iv = \"a0d5ebe6a0d5ebe6a0d5ebe6a0d5ebe6\";\r\n  return cryptojs.AES.decrypt(encriptText, key, {\r\n    iv: cryptojs.enc.Hex.parse(iv),\r\n  }).toString(cryptojs.enc.Utf8);\r\n};\r\n\r\nconst getIdUsers = async (email) => {\r\n  const response = await axios.get(\r\n    `${urlApi}/api/users?filters[email][$eq]=${email}`\r\n  );\r\n  return response.data[0].id;\r\n};\r\n","import React from \"react\";\r\nimport './VerificationCode.scss'\r\nimport LoginCard from \"../../components/atoms/LoginCard/LoginCard\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport VerificationCodeInput from \"../../components/atoms/VerificationCodeInput/VerificationCodeInput\";\r\nimport { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Decrypt } from \"../../Api/login/recover_account\";\r\nconst key = process.env.REACT_APP_SECRET_KEY;\r\n\r\nconst VerificationCode = () => {\r\n    const {code,id,idUser} = useParams()\r\n//decriopt code\r\n    let encriptData = code;\r\n    encriptData = encriptData.replace(/_/g, \"/\")\r\n    encriptData = Decrypt(encriptData)\r\n\r\n    const [codedecript,setCodedecript] = useState(encriptData)\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"VerificationCode\">\r\n                <LoginCard className={\"inside_verificationCode\"} logo title={\"Código de recuperación\"} subTitle={\"Ingresa el código enviado\"}>\r\n                    <div className=\"inputContainer\">\r\n                        <VerificationCodeInput codeApi={codedecript} idencript={id} idUser={idUser}></VerificationCodeInput>\r\n                    </div>\r\n                </LoginCard>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default VerificationCode"],"names":["urlApi","process","key","VerifyEmail","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","findEmail","navigate","wrap","_context2","prev","next","axios","concat","then","res","data","length","CorrectModal","mainFunction","_ref2","_callee","code","_context","findEmailF","sent","updateCode","id","generateCode","createCodeApi","stop","apply","arguments","IncorrectModal","catch","_x","_x2","Math","floor","random","_ref3","_callee3","email","idUsers","codeEncrypt","idEncrypt","idUsersEncript","_context3","getIdUsers","console","log","sendEmail","Encrypt","replace","_x3","_x4","_x5","_x6","_ref4","_callee4","response","_context4","abrupt","t0","_x7","_ref5","_callee5","subject","text","codestring","_context5","toString","to","_x8","_x9","_x10","_ref6","_callee6","newCode","newData","_context6","_x11","_x12","_x13","_x14","cryptojs","Decrypt","encriptText","iv","_ref7","_callee7","_context7","_x15","_useParams","useParams","idUser","encriptData","_useState","useState","_useState2","_slicedToArray","codedecript","_jsx","_Fragment","children","className","LoginCard","logo","title","subTitle","VerificationCodeInput","codeApi","idencript"],"sourceRoot":""}