{"version":3,"file":"static/js/321.7956eb7e.chunk.js","mappings":"wKAYA,EARyB,SAAHA,GAAqB,IAAhBC,EAASD,EAATC,UACzB,OACEC,EAAAA,EAAAA,KAAA,OAAKD,UAAS,eAAAE,OAAiBF,GAAYG,UACvCF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,sBAGvB,C,+QCNMI,EAAMC,mBAGCC,EAAW,eAAAP,GAAAQ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,EAAKC,EAAQC,GAAQ,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGhDN,GAEuBO,EAAAA,EAAAA,KAAWC,oDAAyBR,GACzDS,MAAK,SAACC,GAEH,IAAMC,GAAUC,EAAAA,EAAAA,GAAQF,EAAIV,KAAKa,KAAKC,aAChCC,GAASC,EAAAA,EAAAA,GAAQN,EAAIV,KAAKa,KAAKI,IACrC,IAA+B,IAA5BP,EAAIV,KAAKa,KAAKK,WAAsBxB,WAAsCiB,EAAQ,CACjFV,EAAQS,EAAIV,MACZmB,aAAaC,QAAQ,QAAQV,EAAIV,KAAKqB,KAEtCF,aAAaC,QAAQ,UAAWV,EAAIV,KAAKa,KAAKS,UAC9CH,aAAaC,QAAQ,WAAYL,IACjCQ,EAAAA,EAAAA,IAAa,0BACb,IAAIC,EAAYC,EAAUf,EAAIV,KAAKa,KAAKI,IACxCE,aAAaC,QAAQ,MAAMI,GAC3BE,YAAW,WACPC,OAAOC,SAASC,QAAQ,mBAADtC,OAAoBiC,GAC/C,GAAG,KAEP,MAEIM,EAAAA,EAAAA,IAAe,2BAEvB,IACCC,OAAM,SAACC,GAEkC,qBAAnCA,EAAMC,SAASjC,KAAKgC,MAAME,MACzBC,EAAAA,EAAAA,IAAU,+DAA6D,mKAEhC,oBAAnCH,EAAMC,SAASjC,KAAKgC,MAAME,OAC9BJ,EAAAA,EAAAA,IAAe,2BAEvB,IACH,wBAAA1B,EAAAgC,OAAA,GAAArC,EAAA,KACJ,gBAtCuBsC,EAAAC,EAAAC,GAAA,OAAAnD,EAAAoD,MAAA,KAAAC,UAAA,KAwCXhB,EAAY,SAACiB,GAEtB,IAAIC,EAAUC,IAAAA,IAAAA,QAAqBF,EAAKG,WAAYpD,GAAKoD,WAEzD,OADAF,EAAUA,EAAQd,QAAQ,MAAO,IAErC,E,sBCsBA,EA7Dc,WACd,IAAM3B,GAAW4C,EAAAA,EAAAA,MAEbC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAiCL,EAAAA,EAAAA,UAAS,CACtC,WAAa,CAACM,MAAM,KAAMC,eAAe,SACzC,SAAW,CAACD,MAAM,KAAMC,eAAe,WACzCC,GAAAN,EAAAA,EAAAA,GAAAG,EAAA,GAHKI,EAASD,EAAA,GAACE,EAAYF,EAAA,IAK7BG,EAAAA,EAAAA,YAAU,WAEN,IAAI,IAAMC,KAAgBH,EAEnBI,SAASC,eAAeF,KAEvBG,EAAAA,EAAAA,IAAgBH,EAAaH,EAGzC,GAAE,CAACA,IAkBH,OACInE,EAAAA,EAAAA,KAAA0E,EAAAA,SAAA,CAAAxE,UACIyE,EAAAA,EAAAA,MAAA,OAAK5E,UAAU,QAAOG,SAAA,EAClBF,EAAAA,EAAAA,KAAC4E,EAAAA,EAAI,CAAC7E,UAAW,OAAQ8E,IAAK,OAC9BF,EAAAA,EAAAA,MAACG,EAAAA,EAAS,CAACC,MAAO,sBAAoBC,SAAS,mBAAe9E,SAAA,EAC1DyE,EAAAA,EAAAA,MAAA,OAAK5E,UAAU,mBAAkBG,SAAA,EAC7BF,EAAAA,EAAAA,KAACiF,EAAAA,GAAK,CAACF,MAAM,UAAUG,YAAa,UAAWvD,GAAG,aAAawD,SAAU,SAACC,IAAKC,EAAAA,EAAAA,IAAYD,EAAE,aAAajB,EAAUC,EAAa,KACjIpE,EAAAA,EAAAA,KAACsF,EAAAA,GAAa,CAACP,MAAO,gBAAcG,YAAa,gBAAcvD,GAAG,WAAWwD,SAAU,SAACC,IAAKC,EAAAA,EAAAA,IAAYD,EAAE,WAAWjB,EAAUC,EAAa,QAEjJpE,EAAAA,EAAAA,KAACuF,EAAAA,GAAO,CAACC,GAAI,mBAAmBtF,UAC5BF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,mBAAkBG,SAAC,iCAErC2D,GACG7D,EAAAA,EAAAA,KAACyF,EAAAA,EAAgB,KAEjBzF,EAAAA,EAAAA,KAAC0F,EAAAA,GAAM,CAAC3F,UAAW,cAAegF,MAAM,oBAAiBY,QAAS,YA/B5D,WAEtB,IAAGC,EAAAA,EAAAA,IAAiBzB,EAAUC,GAC9B,CAEIN,GAAW,GACX,IAAMpD,EAAO,CACT,WAAayD,EAAU0B,WAAW7B,MAClC,SAAWG,EAAU2B,SAAS9B,OAGlC3D,EAAYK,EAAKE,EAErB,CACJ,CAiB2FmF,EAAoB,KAE/F/F,EAAAA,EAAAA,KAACuF,EAAAA,GAAO,CAACC,GAAI,OAAOtF,UAChBF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,WAAUG,SAAC,qCAMlD,C,oHCvEMC,EAAMC,mBAECsB,EAAU,SAAC0B,GACpB,IAAIC,EAAUC,IAAAA,IAAAA,QAAqBF,EAAKG,WAAYpD,GAAKoD,WAEzD,OADAF,EAAUA,EAAQd,QAAQ,MAAO,IAErC,EAGajB,EAAU,SAAC0E,GACpB,IAAIC,EAAUD,EAAYzD,QAAQ,KAAM,KAExC,OAAOe,IAAAA,IAAAA,QAAqB2C,EAAS9F,EAAK,CAAE+F,GAAI5C,IAAAA,IAAAA,IAAAA,MADrC,sCACkEC,SAASD,IAAAA,IAAAA,KAC1F,C","sources":["components/atoms/AnimationLoading/AnimationLoading.jsx","Api/login/apiLogic.js","pages/Login/Login.jsx","utilities/Hooks.js"],"sourcesContent":["import React from 'react'\r\n\r\nimport \"./AnimationLoading.scss\"\r\n\r\nconst AnimationLoading = ({className}) => {\r\n  return (\r\n    <div className={`cnt_loading ${className}`}>\r\n        <div className='AnimationLoading'></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AnimationLoading","import axios from \"axios\"\r\nimport { CorrectModal, IncorrectModal, InfoModal } from \"../../components/molecules/modals/Modals\";\r\n// import { Decrypt } from \"../../utilities/Hooks\";\r\nimport cryptojs from 'crypto-js'\r\nconst key = process.env.REACT_APP_SECRET_KEY\r\nimport { Decrypt, Encrypt } from \"../../utilities/Hooks\";\r\nconst urlApi = process.env.REACT_APP_API_URL;\r\nexport const loginConfir = async (data,setName,navigate)=>\r\n{\r\n\r\n    if(data)\r\n    {\r\n        const authenticated = axios.post(urlApi+\"/api/auth/local\",data) \r\n        .then((res)=>\r\n        {\r\n            const typeAcc = Decrypt(res.data.user.accounttype)\r\n            const IdCrip = Encrypt(res.data.user.id)\r\n            if(res.data.user.confirmed === true && process.env.REACT_APP_ACCOUNTTYPE === typeAcc){\r\n                setName(res.data)\r\n                localStorage.setItem(\"token\",res.data.jwt)\r\n                \r\n                localStorage.setItem(\"userWeb\", res.data.user.username)\r\n                localStorage.setItem(\"jeyaiodl\", IdCrip)\r\n                CorrectModal(\"Credenciales correctas\")\r\n                let idEncrypt = EncryptNB(res.data.user.id) \r\n                localStorage.setItem(\"ref\",idEncrypt)\r\n                setTimeout(() => {\r\n                    window.location.replace(`/user/dashboard/${idEncrypt}`);\r\n                }, 3500)\r\n\r\n            }\r\n            else{\r\n                IncorrectModal(\"Credenciales incorrectas\")\r\n            }\r\n        })\r\n        .catch((error)=>\r\n        {\r\n            if(error.response.data.error.name === \"ApplicationError\"){\r\n                InfoModal(\"Para iniciar sesión, necesitamos que confirmes tu cuenta.\", \" Por favor, sigue las instrucciones en tu correo electrónico para completar el proceso de autenticación. Si necesitas ayuda, contáctanos. ¡Gracias!\")\r\n            }\r\n            else if(error.response.data.error.name === \"ValidationError\"){\r\n                IncorrectModal(\"Credenciales incorrectas\")\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const EncryptNB = (text)=>\r\n{\r\n    let encrypt = cryptojs.AES.encrypt(text.toString(), key).toString();\r\n    encrypt = encrypt.replace(/\\//g, \"_\")\r\n    return encrypt\r\n}\r\n\r\nexport const DecryptNB = (encriptText) => {\r\n    let decrypt = encriptText.replace(/_/g, \"/\")\r\n    const iv = \"a0d5ebe6a0d5ebe6a0d5ebe6a0d5ebe6\";\r\n    return cryptojs.AES.decrypt(decrypt, key, { iv: cryptojs.enc.Hex.parse(iv)}).toString(cryptojs.enc.Utf8);\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport './Login.scss'\r\nimport LoginCard from \"../../components/atoms/LoginCard/LoginCard\";\r\nimport { Button, Input, InputPassword } from \"../../components\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { ColorValidation, SubmitValidation, UpdateValue } from \"../../utilities/Validations\";\r\nimport { useStateContext } from \"../../contexts/ContextProvider\";\r\nimport Back from \"../../components/atoms/Back/Back\";\r\nimport { loginConfir } from \"../../Api/login/apiLogic\";\r\nimport { Encrypt } from \"../../utilities/Hooks\";\r\nimport AnimationLoading from \"../../components/atoms/AnimationLoading/AnimationLoading\";\r\n\r\n\r\nconst Login = () => {\r\nconst navigate = useNavigate()\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [inputList,setInputList] = useState({\r\n        \"identifier\":{value:null, validationType:\"empty\"},\r\n        \"password\":{value:null, validationType:\"empty\"},\r\n    })\r\n\r\n    useEffect(()=>\r\n    {\r\n        for(const propertyName in inputList)\r\n        {\r\n            if(document.getElementById(propertyName))\r\n            {\r\n                ColorValidation(propertyName,inputList)\r\n            }\r\n        }\r\n    },[inputList])\r\n\r\n    const validationFunction =()=>\r\n    {\r\n        if(SubmitValidation(inputList,setInputList))\r\n        {\r\n            // ----------------------------------------------------------------------------poner ruta de auth cuado ya este\r\n            setLoading(true)\r\n            const data = {\r\n                \"identifier\":inputList.identifier.value,\r\n                \"password\":inputList.password.value\r\n            }\r\n            let res;\r\n            loginConfir(data,navigate)\r\n           \r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <Back className={\"back\"} url={\"/\"}></Back>\r\n                <LoginCard title={\"Inicio de sesión\"} subTitle=\"Ingresar aquí\">\r\n                    <div className=\"inputs-container\">\r\n                        <Input title=\"Usuario\" placeholder={\"Usuario\"} id=\"identifier\" onChange={(e)=>{UpdateValue(e,\"identifier\",inputList,setInputList)}}></Input>\r\n                        <InputPassword title={\"Contraseña\"} placeholder={\"Contraseña\"} id=\"password\" onChange={(e)=>{UpdateValue(e,\"password\",inputList,setInputList)}}></InputPassword>\r\n                    </div>\r\n                    <NavLink to={\"/recover-account\"}>\r\n                        <div className=\"rememberPassword\">Olvidé mi contraseña</div>\r\n                    </NavLink>\r\n                    {loading ? (\r\n                        <AnimationLoading />\r\n                    ):(     \r\n                        <Button className={\"btn_primary\"} title=\"Iniciar sesión\" onClick={()=>{validationFunction()}}></Button>\r\n                    )}\r\n                    <NavLink to={\"/log\"}>\r\n                        <div className=\"register\">Aun no tengo una cuenta</div>\r\n                    </NavLink>\r\n                </LoginCard>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Login","import cryptojs from 'crypto-js'\r\n\r\nconst key = process.env.REACT_APP_SECRET_KEY\r\n\r\nexport const Encrypt = (text) => {\r\n    let encrypt = cryptojs.AES.encrypt(text.toString(), key).toString();\r\n    encrypt = encrypt.replace(/\\//g, \"_\")\r\n    return encrypt\r\n};\r\n\r\n\r\nexport const Decrypt = (encriptText) => {\r\n    let decrypt = encriptText.replace(/_/g, \"/\")\r\n    const iv = \"a0d5ebe6a0d5ebe6a0d5ebe6a0d5ebe6\";\r\n    return cryptojs.AES.decrypt(decrypt, key, { iv: cryptojs.enc.Hex.parse(iv)}).toString(cryptojs.enc.Utf8);\r\n};"],"names":["_ref","className","_jsx","concat","children","key","process","loginConfir","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","setName","navigate","wrap","_context","prev","next","axios","urlApi","then","res","typeAcc","Decrypt","user","accounttype","IdCrip","Encrypt","id","confirmed","localStorage","setItem","jwt","username","CorrectModal","idEncrypt","EncryptNB","setTimeout","window","location","replace","IncorrectModal","catch","error","response","name","InfoModal","stop","_x","_x2","_x3","apply","arguments","text","encrypt","cryptojs","toString","useNavigate","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","value","validationType","_useState4","inputList","setInputList","useEffect","propertyName","document","getElementById","ColorValidation","_Fragment","_jsxs","Back","url","LoginCard","title","subTitle","Input","placeholder","onChange","e","UpdateValue","InputPassword","NavLink","to","AnimationLoading","Button","onClick","SubmitValidation","identifier","password","validationFunction","encriptText","decrypt","iv"],"sourceRoot":""}